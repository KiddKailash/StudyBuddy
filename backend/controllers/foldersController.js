const { getDB } = require("../database/db");
const { ObjectId } = require("mongodb");

/**
 * Create a new folder for the user.
 * The folder document will include:
 *  - A primary key (_id) automatically generated by MongoDB.
 *  - userId: References the user who owns the folder.
 *  - folderName: The name of the folder.
 *  - createdAt: Timestamp of folder creation.
 */
exports.createFolder = async (req, res) => {
  const { folderName } = req.body;
  const userId = req.user.id; // req.user is set by authMiddleware

  if (!folderName) {
    return res.status(400).json({ error: "folderName is required." });
  }

  try {
    const db = getDB();
    const foldersCollection = db.collection("folders");

    const newFolder = {
      userId: new ObjectId(userId),
      folderName,
      createdAt: new Date(),
    };

    const result = await foldersCollection.insertOne(newFolder);

    res.status(201).json({
      message: "Folder created successfully.",
      folder: { id: result.insertedId.toString(), ...newFolder },
    });
  } catch (error) {
    console.error("Create Folder Error:", error);
    res.status(500).json({ error: "Server error while creating folder." });
  }
};

/**
 * Retrieve all folders for the current user.
 */
exports.getFolders = async (req, res) => {
  const userId = req.user.id;
  try {
    const db = getDB();
    const foldersCollection = db.collection("folders");
    const folders = await foldersCollection.find({ userId: new ObjectId(userId) }).toArray();
    // Map folders to return _id as id.
    const formattedFolders = folders.map((folder) => ({
      id: folder._id.toString(),
      folderName: folder.folderName,
      createdAt: folder.createdAt,
    }));
    res.status(200).json({ folders: formattedFolders });
  } catch (error) {
    console.error("Error retrieving folders:", error);
    res.status(500).json({ error: "Server error retrieving folders." });
  }
};
